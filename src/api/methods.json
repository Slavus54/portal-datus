[
    {
        "title": "move",
        "category": "date",
        "description": "run through the calendar in all directions, return date.",
        "args": [
            {
                "name": "flag",
                "type": "string"
            },
            {
                "name": "direction",
                "type": "string"
            },
            {
                "name": "num",
                "type": "number"
            }
        ],
        "examples": [
            {
                "input": "If today 15.08.2024, then I call datus.move('day', '+', 5)",
                "output": "20.05.2024"
            }
        ],
        "tags": ["date", "update", "calendar"],
        "size": 14
    },
    {
        "title": "dates",
        "category": "date",
        "description": "create an array of dates since weekday (today by default) with time period iterations by flag ('day', 'week' or 'month'). num is a number of dates.",
        "args": [
            {
                "name": "flag",
                "type": "string"
            },
            {
                "name": "num",
                "type": "number"
            },
            {
                "name": "weekday",
                "type": "string"
            }
        ],
        "examples": [
            {
                "input": "If today is tuesday 29.10.2024, I call datus.dates('day', 3)",
                "output": "['30.10.2024', '31.10.2024', '01.11.2024']"
            }
        ],
        "tags": ["date", "array", "calendar"],
        "size": 12
    },
    {
        "title": "difference",
        "category": "date",
        "description": "find difference in flag time period (by default days) between today and date in past or future. lock is a integer limit of inside date iterations to compare with date.",
        "args": [
            {
                "name": "date",
                "type": "string"
            },
            {
                "name": "flag",
                "type": "string"
            },
            {
                "name": "lock",
                "type": "number"
            }
        ],
        "examples": [
            {
                "input": "If today is 29.10.2024, I call datus.difference('04.11.2024', 'day')",
                "output": "4"
            }
        ],
        "tags": ["date", "difference", "calendar"],
        "size": 18
    },
    {
        "title": "day",
        "category": "date",
        "description": "returned number of hours/minutes/seconds after day starts (*key* = 'start') or until its end (*key* = 'end').",
        "args": [
            {
                "name": "key",
                "type": "string"
            },
            {
                "name": "size",
                "type": "string"
            }
        ],
        "examples": [
            {
                "input": "If today is tuesday 19:39 31.10.2024, I call datus.day()",
                "output": "19"
            }
        ],
        "tags": ["date", "day", "calendar"],
        "size": 11
    },
    {
        "title": "range",
        "category": "date",
        "description": "returned difference between smallest and largest integer value of date's period ('day', 'month' or 'year') in array of unsorted dates.",
        "args": [
            {
                "name": "dates",
                "type": "string[]"
            },
            {
                "name": "period",
                "type": "string"
            }
        ],
        "examples": [
            {
                "input": "If I call datus.range(['12.06.2021', '17.09.2005'])",
                "output": "5"
            }
        ],
        "tags": ["date", "array", "calendar"],
        "size": 23
    },
    {
        "title": "now",
        "category": "date",
        "description": "returns current date or time and divides it by second parameter",
        "args": [
            {
                "name": "format",
                "type": "string"
            },
            {
                "name": "divider",
                "type": "string"
            }
        ],
        "examples": [
            {
                "input": "If today is 29.10.2024, I call datus.now('date')",
                "output": "'29.10.2024'"
            }
        ],
        "tags": ["date", "time", "calendar"],
        "size": 11
    },
    {
        "title": "pointer",
        "category": "date",
        "description": "formatting and returns date with word-pointer",
        "args": [
            {
                "name": "text",
                "type": "string"
            }
        ],
        "examples": [
            {
                "input": "If todays is 04.07.2021 I call datus.pointer('tomorrow')",
                "output": "'05.07.2021'"
            }
        ],
        "tags": ["date", "word", "text", "calendar"],
        "size": 15
    },
    {
        "title": "dateDistance",
        "category": "date",
        "description": "counts difference between 2 dates in *size* and returns it",
        "args": [
            {
                "name": "start",
                "type": "string"
            },
            {
                "name": "end",
                "type": "string"
            },
            {
                "name": "size",
                "type": "string"
            }
        ],
        "examples": [
            {
                "input": "If I call datus.dateDistance('01.01.1998', '19.05.2007', 'month')",
                "output": "115"
            }
        ],
        "tags": ["date", "difference", "calendar"],
        "size": 37
    },
    {
        "title": "deadlineOfMonth",
        "category": "date",
        "description": "returns deadline which counted by *percent* of date's month size.",
        "args": [
            {
                "name": "date",
                "type": "string"
            },
            {
                "name": "percent",
                "type": "number"
            },
            {
                "name": "round",
                "type": "number"
            }
        ],
        "examples": [
            {
                "input": "If I call datus.deadlineOfMonth('19.05.2007', 1e1), return days as 19 + 10% from May size (31)",
                "output": "22"
            }
        ],
        "tags": ["date", "month", "calendar"],
        "size": 5
    },
    {
        "title": "percentOfMonth",
        "category": "date",
        "description": "returns % of remaining days of date's month by *period* and *num*",
        "args": [
            {
                "name": "date",
                "type": "string"
            },
            {
                "name": "num",
                "type": "number"
            },
            {
                "name": "period",
                "type": "string"
            },
            {
                "name": "round",
                "type": "number"
            }
        ],
        "examples": [
            {
                "input": "If I call datus.percentOfMonth('12.10.2023', 15), result = 15 days as % of (31 - 12) month residue",
                "output": "79"
            }
        ],
        "tags": ["date", "percent", "month", "calendar"],
        "size": 10
    },
    {
        "title": "monthDayBorder",
        "category": "date",
        "description": "checks days by parameter *num* if it less or equal to days before month end and returns true/false",
        "args": [
            {
                "name": "date",
                "type": "string"
            },
            {
                "name": "num",
                "type": "number"
            }
        ],
        "examples": [],
        "tags": ["date", "percent", "month", "calendar"],
        "size": 5
    },
    {
        "title": "dateByPercent",
        "category": "date",
        "description": "returns date by % with year *num*",
        "args": [
            {
                "name": "percent",
                "type": "number"
            },
            {
                "name": "num",
                "type": "number"
            },
            {
                "name": "round",
                "type": "number"
            }
        ],
        "examples": [],
        "tags": ["date", "percent", "month", "calendar"],
        "size": 20
    },
    {
        "title": "randomDates",
        "category": "date",
        "description": "generates list of passed/future dates by parameters",
        "args": [
            {
                "name": "num",
                "type": "number"
            },
            {
                "name": "border",
                "type": "number"
            },
            {
                "name": "isPassed",
                "type": "boolean"
            }
        ],
        "examples": [],
        "tags": ["date", "list", "month", "calendar"],
        "size": 9
    },
    {
        "title": "monthAllocation",
        "category": "date",
        "description": "builds list of dates by month's title, year and step of allocation",
        "args": [
            {
                "name": "title",
                "type": "string"
            },
            {
                "name": "num",
                "type": "number"
            },
            {
                "name": "year",
                "type": "number"
            }
        ],
        "examples": [],
        "tags": ["date", "month", "calendar"],
        "size": 13
    },
    {
        "title": "decadesMonthAllocation",
        "category": "date",
        "description": "builds an array of dates with month's decades by number of days in each one",
        "args": [
            {
                "name": "days",
                "type": "string[]"
            },
            {
                "name": "title",
                "type": "string"
            },
            {
                "name": "year",
                "type": "number"
            }
        ],
        "examples": [],
        "tags": ["date", "percent", "month", "calendar"],
        "size": 18
    },
    {
        "title": "dateValue",
        "category": "date",
        "description": "returns days of date since beginning of year",
        "args": [
            {
                "name": "date",
                "type": "string"
            }
        ],
        "examples": [],
        "tags": ["date", "percent", "month", "calendar"],
        "size": 15
    },
    {
        "title": "dateByParameters",
        "category": "date",
        "description": "returns accurately randomly generated date by a lot of parameters.",
        "args": [
            {
                "name": "dayBorders",
                "type": "number[]"
            },
            {
                "name": "monthBorders",
                "type": "number[]"
            },
            {
                "name": "century",
                "type": "number"
            },
            {
                "name": "decade",
                "type": "number"
            }]
        ,
        "examples": [],
        "tags": ["date", "percent", "month", "calendar"],
        "size": 11
    },
    {
        "title": "monthDatesByWeekday",
        "category": "date",
        "description": "returns list of dates by *weekday* and month of *date*",
        "args": [
            {
                "name": "date",
                "type": "string"
            },
            {
                "name": "weekday",
                "type": "string"
            }
        ],
        "examples": [],
        "tags": ["date", "percent", "month", "calendar"],
        "size": 23
    },
    {
        "title": "dateByYearWeek",
        "category": "date",
        "description": "returns date by *num* of weeks of the *year*",
        "args": [
            {
                "name": "year",
                "type": "number"
            },
            {
                "name": "num",
                "type": "number"
            }
        ],
        "examples": [],
        "tags": ["date", "percent", "month", "calendar"],
        "size": 19
    },
    {
        "title": "monthDatesByStep",
        "category": "date",
        "description": "generates list of dates since *date* with *step* in days throughout the whole date's month",
        "args": [
            {
                "name": "date",
                "type": "string"
            },
            {
                "name": "step",
                "type": "number"
            }
        ],
        "examples": [],
        "tags": ["date", "percent", "month", "calendar"],
        "size": 15
    },
    {
        "title": "dateByDays",
        "category": "date",
        "description": "builds date by *value* od dates and *year*",
        "args": [
            {
                "name": "value",
                "type": "number"
            },
            {
                "name": "year",
                "type": "number"
            }
        ],
        "examples": [],
        "tags": ["date", "days", "month", "calendar"],
        "size": 20
    },
    {
        "title": "dateByNum",
        "category": "date",
        "description": "generates date from *num* of year with fractional part",
        "args": [
            {
                "name": "num",
                "type": "number"
            },
            {
                "name": "round",
                "type": "number"
            }
        ],
        "examples": [],
        "tags": ["date", "days", "month", "calendar"],
        "size": 5
    },
    {
        "title": "filterDatesByMonthGap",
        "category": "date",
        "description": "filter days of year's month inside borders and returns list of dates",
        "args": [
            {
                "name": "dates",
                "type": "string[]"
            },
            {
                "name": "min",
                "type": "number"
            },
            {
                "name": "max",
                "type": "number"
            },
            {
                "name": "round",
                "type": "number"
            }
        ],
        "examples": [],
        "tags": ["date", "days", "month", "calendar"],
        "size": 19
    },
    {
        "title": "time",
        "category": "time",
        "description": "received *value* in minutes and convert it to HH:MM format, or if *key* equal 'deconvert' it returned number of minutes. Flag *isTwelve* is for US time format",
        "args": [
            {
                "name": "value",
                "type": "string"
            },
            {
                "name": "key",
                "type": "string"
            },
            {
                "name": "isTwelve",
                "type": "boolean"
            }
        ],
        "examples": [],
        "tags": ["time"],
        "size": 19
    },
    {
        "title": "times",
        "category": "time",
        "description": "returned array of timestamps in HH:MM format beginning from *start* time with *period* in minutes, *num* - size of array.",
        "args": [
            {
                "name": "start",
                "type": "string"
            },
            {
                "name": "period",
                "type": "number"
            },
            {
                "name": "num",
                "type": "number"
            }
        ],
        "examples": [],
        "tags": ["time"],
        "size": 18
    }
]